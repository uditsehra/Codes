/*
Given a long vector of strings, print the strings that contain the strings generated by numeric string str.

string searchIn [] = {
            "prateek", "sneha", "deepak", "arnav", "shikha", "palak",
            "utkarsh", "divyam", "vidhi", "sparsh", "akku"
    };
For example, if the input is 26 and the string is coding, then output should be coding since 26 can produce co which is contained in coding.

Input Format
A numeric string str

Constraints
len(str) < 10 No of strings in the vector < 10

Output Format
Each matched string from the given vector.

Sample Input
34
Sample Output
vidhi
divyam
sneha
Explanation
34 will result into combinations :

*dg         *eg         *fg
*dh            *eh         *fh
*di            *ei         *fi
Corresponding strings are output.

vidhi contains dh
divyam contains di
sneha contains eh
*/

#include<iostream>
#include<string>
#include<bits/stdc++.h>
using namespace std;

char keypad[][10] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};

string searchIn [] = {
            "prateek", "sneha", "deepak", "arnav", "shikha", "palak",
            "utkarsh", "divyam", "vidhi", "sparsh", "akku"
};

void getSmarkKeypad(char *in, char *out, int i, int j)
{
	if(in[i] == '\0')
	{
		out[j] = '\0';

		int i;
		string s = "";

		for(i = 0; out[i]!='\0'; i++)
		{
			s = s+out[i];
		}

		for(i = 10; i>=0; i--)
		{
			size_t found = searchIn[i].find(s);
			if(found != string::npos)
			{
				cout << searchIn[i]<< endl;
			}
		}
		return;
	}

	int digit = in[i] - '0';

	for(int k=0; keypad[digit][k] != '\0'; k++)
	{
		out[j] = keypad[digit][k];
		getSmarkKeypad(in, out, i+1, j+1);
	}

	return;
}

int main() {

	char a[10], b[10];
	cin >> a;
	getSmarkKeypad(a, b, 0, 0);

	return 0;
}

/*

This solution given below is much better to understand.

#include <iostream>
#include <vector>
#include <string>
using namespace std;
vector <string> searchIn= {
            "prateek", "sneha", "deepak", "arnav", "shikha", "palak",
            "utkarsh", "divyam", "vidhi", "sparsh", "akku"
    };
vector <string> phone = { " ", " ", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };

bool find (string &a, string &b)
{
    for (int i=0; i<(b.size()-a.size()+1); i++)
    {
        if (b.substr(i, a.size())==a) return true;
    }
    return false;
}

void help (string &t, vector <string> &searchIn)
{
    for (int i=0; i<searchIn.size(); i++)
    {
        if (find(t, searchIn[i])) {
            cout << searchIn[i]<<endl;
        }
    }
}

void check (string &s, int index, string t)
{
    if (index==s.size()) {
        help (t, searchIn);
    } else {
        int d = s[index] - '0';
        string w = phone[d];
        for (int i=0; i<w.size(); i++)
        {
            t.push_back(w[i]);
            ++index;
            check(s, index, t);
            --index;
            t.pop_back();
        }
    }
}

int main ()
{
    string s, t;
    cin >> s;
  
    check (s, 0, t);
    
    return 0;
}


*/